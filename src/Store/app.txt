<Route
                      path="/profile"
                      element={
                        <ProtectedRoute>
                          <ProfilePage />
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/stores"
                      element={
                        <ProtectedRoute>
                          <StoresPage />
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/subscription"
                      element={
                        <ProtectedRoute>
                          <SubscriptionPage />
                        </ProtectedRoute>
                      }
                    />

                    {/* Store-specific routes (require a store to be selected) */}
                    <Route
                      path="/store/dashboard"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <StoreDashboard />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/products"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <ProductsPage />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/inventory"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <InventoryPage />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/sales"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <SalesPage />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/customers"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <CustomersPage />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/suppliers"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <SuppliersPage />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/pos"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <POS />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />

                    {/* Redirect root to dashboard or login */}
                    <Route
                      path="/"
                      element={
                        <Navigate
                          to={user && token ? "/dashboard" : "/login"}
                          replace
                        />
                      }
                    />

                    {/* Catch all route - redirect to dashboard */}
                    <Route
                      path="*"
                      element={
                        <Navigate
                          to={user && token ? "/dashboard" : "/login"}
                          replace
                        />
                      }
                    />

















                    import React, { useEffect, useState } from "react";
import { Layout } from "antd";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";
// import { useAuthStore } from "./stores/storeConfig";
// import LoginPage from './pages/LoginPage';
// import RegisterPage from './pages/RegisterPage';
// import Dashboard from './pages/Dashboard';
// import StoresPage from "./pages/StoresPage";
// import StoreDashboard from "./pages/StoreDashboard";
// import ProductsPage from "./pages/ProductsPage";
// import InventoryPage from "./pages/InventoryPage";
// import SalesPage from "./pages/SalesPage";
// import CustomersPage from "./pages/CustomersPage";
// import SuppliersPage from "./pages/SuppliersPage";
// import POS from "./pages/POS";
// import ProfilePage from "./pages/ProfilePage";
// import SubscriptionPage from "./pages/SubscriptionPage";
// import LoadingSpinner from "./components/LoadingSpinner";
// import "./styles/global.css";
import AppHeader from "./components/Header";
import Sidebar from "./components/Sidebar";
import LoginPage from "./components/Auth/login";
import RegisterPage from "./components/Auth/register";
import Dashboard from "./components/Dashboard/Dashboard";
import { useAuthStore, useStoreStore } from "./Store/stores";
import LoadingSpinner from "./components/LoadingSpinner";

// Protected Route component to handle authentication
const ProtectedRoute = ({ children }) => {
  const { user, token, isLoading } = useAuthStore();

  if (isLoading) {
    return <LoadingSpinner />;
  }

  if (!user || !token) {
    return <Navigate to="/login" replace />;
  }

  return children;
};

// Store Required Route - ensures a store is selected
const StoreRequiredRoute = ({ children }) => {
  const { currentStore } = useStoreStore();

  if (!currentStore) {
    return <Navigate to="/stores" replace />;
  }

  return children;
};

const App = () => {
  const { user, token } = useAuthStore();
  const [isInitialized, setIsInitialized] = useState(false);
  console.log(user, token);
  // Check for existing session on app load
  useEffect(() => {
    // This will be automatically handled by the persist middleware
    setIsInitialized(true);
  }, []);

  if (!isInitialized) {
    return <LoadingSpinner />;
  }

  return (
    <Layout>
      <div className="app-container">
        {user && token && <AppHeader />}
        <Layout>
          <div className="content-container">
            {user && token && <Sidebar />}
            <Layout.Content
              style={{
                marginLeft: user && token ? 240 : 0,
                marginTop: 64,
                padding: 24,
                minHeight: "calc(100vh - 64px)",
              }}
            >
              <main className="main-content">
                <Routes>
                  {/* Public Routes */}
                  <Route
                    path="/login"
                    element={
                      user && token ? (
                        <Navigate to="/dashboard" replace />
                      ) : (
                        <LoginPage />
                      )
                    }
                  />
                  <Route
                    path="/register"
                    element={
                      user && token ? (
                        <Navigate to="/dashboard" replace />
                      ) : (
                        <RegisterPage />
                      )
                    }
                  />

                  {/* Protected Routes */}
                  <Route
                    path="/dashboard"
                    element={
                      <ProtectedRoute>
                        <Dashboard />
                      </ProtectedRoute>
                    }
                  />
                  <Route
                      path="/profile"
                      element={
                        <ProtectedRoute>
                          <ProfilePage />
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/stores"
                      element={
                        <ProtectedRoute>
                          <StoresPage />
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/subscription"
                      element={
                        <ProtectedRoute>
                          <SubscriptionPage />
                        </ProtectedRoute>
                      }
                    />

                    {/* Store-specific routes (require a store to be selected) */}
                    <Route
                      path="/store/dashboard"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <StoreDashboard />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/products"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <ProductsPage />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/inventory"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <InventoryPage />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/sales"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <SalesPage />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/customers"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <CustomersPage />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/suppliers"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <SuppliersPage />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />
                    <Route
                      path="/store/pos"
                      element={
                        <ProtectedRoute>
                          <StoreRequiredRoute>
                            <POS />
                          </StoreRequiredRoute>
                        </ProtectedRoute>
                      }
                    />

                    {/* Redirect root to dashboard or login */}
                    <Route
                      path="/"
                      element={
                        <Navigate
                          to={user && token ? "/dashboard" : "/login"}
                          replace
                        />
                      }
                    />

                    {/* Catch all route - redirect to dashboard */}
                    <Route
                      path="*"
                      element={
                        <Navigate
                          to={user && token ? "/dashboard" : "/login"}
                          replace
                        />
                      }
                    />
                </Routes>
              </main>
            </Layout.Content>
          </div>
        </Layout>
      </div>
    </Layout>
  );
};

export default App;
